---
# Only the main Sass file needs front matter (the dashes are enough)
---
@charset "utf-8";
@import url(http://fonts.googleapis.com/css?family=Crimson+Text:400,600);
@import url(http://fonts.googleapis.com/css?family=PT+Mono:400,700);

// Our variables
$base-font-family: 'Crimson Text', Helvetica, Arial, sans-serif;
$accent-font-family: 'PT Mono', Helvetica, Arial, sans-serif;
$base-font-size:   16px;
$small-font-size:  $base-font-size * 0.875;
$base-line-height: 1.5;

$spacing-unit:     30px;

$text-color:       #111;
$background-color: #fafafa;//#f9f9ea; // #3E606F;

$grey-color:       #828282;
$grey-color-light: lighten($grey-color, 40%);
$grey-color-dark:  darken($grey-color, 25%);

$brand-color:      lighten($grey-color, 10%);

$dev-color: $brand-color;//#17688E;//#4A4B6C;
$games-color: $brand-color;//#DDD3EA;
$design-color: $brand-color;//#81A684;

$on-palm:          600px;
$on-laptop:        800px;
$on-desktop:       1200px;

$tile-height:      217px;

// Using media queries with like this:
// @include media-query($palm) {
//     .wrapper {
//         padding-right: $spacing-unit / 2;
//         padding-left: $spacing-unit / 2;
//     }
// }
@mixin media-query($device) {
    @media screen and (max-width: $device) {
        @content;
    }
}



// Import partials from `sass_dir` (defaults to `_sass`)
@import
        "base",
        "layout",
        "syntax-highlighting"
;

.grayscale {
  -moz-filter: url("data:image/svg+xml;utf8,<svg xmlns=\'http://www.w3.org/2000/svg\'><filter id=\'grayscale\'><feColorMatrix type=\'matrix\' values=\'0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\'/></filter></svg>#grayscale");
         -o-filter: url("data:image/svg+xml;utf8,<svg xmlns=\'http://www.w3.org/2000/svg\'><filter id=\'grayscale\'><feColorMatrix type=\'matrix\' values=\'0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\'/></filter></svg>#grayscale");
         -webkit-filter: grayscale(100%);
         filter: gray;
         filter: url("data:image/svg+xml;utf8,<svg xmlns=\'http://www.w3.org/2000/svg\'><filter id=\'grayscale\'><feColorMatrix type=\'matrix\' values=\'0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\'/></filter></svg>#grayscale");
}
.row {
    margin-left: -8px;
    margin-right: -8px;
}
.hovers {
  padding: 0;
  width: 100%; height:$tile-height;
  margin-left: 0;
}
.label {
  font-weight: 400;
  border-radius: 0;
}
a.label {
  text-transform: capitalize;
}
a.label {
    color: $text-color;
    &:hover {
        color: $text-color;
        text-decoration: none;
    }
    background-image: none;
    background: none;
    background-image: none;
    border: 1px solid $text-color;

    margin-left: 2px;
}
a.label.dev {
    color: $dev-color;
    border-color: $dev-color;
    &:hover {
      color: $background-color;
      background: $dev-color;
    }
}
a.label.all {
    color: $brand-color;
    border-color: $brand-color;
    &:hover {
      color: $background-color;
      background: $brand-color;
    }
}
a.label.games {
    color: $games-color;
    border-color: $games-color;
    &:hover {
      color: $background-color;
      background: $games-color;
    }
}
a.label.artdesign {
    color: $design-color;
        border-color: $design-color;
    &:hover {
      color: $background-color;
      background: $design-color;
    }
}
a.label-default:hover {
    background-color: none;
    background: none;
    background-image: none;
    background-image: none;
}
header .site-title {
    font-family: $accent-font-family;
    letter-spacing: 1px;
    font-weight: 900;
}

.label , .post-meta {
    font-family: $accent-font-family;
}

video {
  width: 100%    !important;
  height: auto   !important;
}

 @mixin vertical-align {
  position: relative;
  top: 50%;
  -webkit-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  transform: translateY(-50%);
}
img {
    max-width: 100%;
    vertical-align: middle;
}
.hovers {
    text-align: center;
    font-family: $base-font-family;
    font-weight: 400;
    background: rgba(252, 255, 245, .2);
    padding: 0;
      width: 100%; height:$tile-height;
      margin-left: 0;
      &:hover {
  // @extend .grayscale
}
}
.hovers:hover {
    // width: 66.666666%;
    transition: all .2s;
    background: none;
    background: rgba(#050517,.5);
}
// .dev:hover {
//     background: rgba(91,192,222,.75);
//
// }
// .games:hover {
//     background: rgba(240,173,78, .75);
// }
// .artdesign:hover {
//     background: rgba(92,184,92,.75);
// }
.hovers:hover:before {
    @include vertical-align;
    color: #FCFFF5;
        transition: all .2s;
    text-decoration: none !important;

    background-color: rgba(0,0,0,0);
    display: block;
    padding-top: 15px;
    padding-bottom: 15px;
}
.col-sm-4 a:hover {
    text-decoration: none;
}
.col-inner {
  background-size:cover;
  background-position: center;
  height:$tile-height;
  padding: 0;
  margin: 7.5px -7.5px;

}
span.page-heading.pp {
  margin-top: 10px;
}

@media screen and (max-width: 600px) {
    .site-nav .menu-icon {
        padding: 5px 0;
    }
    .site-nav {
        top: calc(50% - 15px);
    }
}

.post_img_soft {
    border-radius: 3px;
    box-shadow: 0px 0px 2px rgba(0, 0, 0, 0.3);
}

.post_img_hard {
    box-shadow: 0px 0px 1px rgba(0, 0, 0, 0.5);
}


@function pow($number, $exp) {
  $value: 1;
  @if $exp > 0 {
    @for $i from 1 through $exp {
      $value: $value * $number;
    }
  }
  @else if $exp < 0 {
    @for $i from 1 through -$exp {
      $value: $value / $number;
    }
  }
  @return $value;
}

@function fact($number) {
  $value: 1;
  @if $number > 0 {
    @for $i from 1 through $number {
      $value: $value * $i;
    }
  }
  @return $value;
}

@function pi() {
  @return 3.14159265359;
}

@function rad($angle) {
  $unit: unit($angle);
  $unitless: $angle / ($angle * 0 + 1);
  // If the angle has 'deg' as unit, convert to radians.
  @if $unit == deg {
    $unitless: $unitless / 180 * pi();
  }
  @return $unitless;
}

@function sin($angle) {
  $sin: 0;
  $angle: rad($angle);
  // Iterate a bunch of times.
  @for $i from 0 through 10 {
    $sin: $sin + pow(-1, $i) * pow($angle, (2 * $i + 1)) / fact(2 * $i + 1);
  }
  @return $sin;
}

@function cos($angle) {
  $cos: 0;
  $angle: rad($angle);
  // Iterate a bunch of times.
  @for $i from 0 through 10 {
    $cos: $cos + pow(-1, $i) * pow($angle, 2 * $i) / fact(2 * $i);
  }
  @return $cos;
}

@function tan($angle) {
  @return sin($angle) / cos($angle);
}

@function one($exp) {
    @return pow(-1, $exp % 2);
}

@function getbg($pg, $i) {
  $c: 150 - one($i) * (50 + $i * 4);
  @return rgba($c, $c, $c, .5);
}

$size: 250px;
$angle: 30deg;
$pages: 23;
$scale: .4;
$top: 80px;

[class^=q] {
  transition: transform .8s ease-in-out,
              background .8s ease-in-out,
              opacity .8s ease-in-out;
  height: $size;
  width: $size;
  position: absolute;
  transform-origin: center;
  transform-style: preserve-3d;
  background-size: cover;
  .zoomed &:after {
    opacity: 0;
  }
}

$pos: - $size * cos($angle);

@for $n from 1 through $pages {
  $angle: $angle + 1deg;
  $pos: $pos + $size * cos($angle);
  $bgtint: getbg($pages, $n);
  $pageurl: '/images/acc/acc%20' + $n + '.jpeg';

  .q#{$n} {
    background-image: url($pageurl);
    transform: scale3d($scale, $scale, $scale)
               translate3d($pos, $top, 0)
               rotate3d(1, 0, 0, 30deg)
               rotate3d(0, 1, 0, one($n) * $angle);

    &:after {
      transition: opacity .8s, background .15s;
      content: '';
      position: absolute;
      top:0;
      left: 0;
      width: 100%;
      height: 100%;
      opacity: .5;
      background-color: $bgtint;
    }

    &:hover {
      &:after {
        background-color: darken($bgtint, 50%);
        opacity: .5;
      }
    }
    .zoomed &:after {
        transition: opacity .15s, background .15s;
    }

  }
}

.accordeon-viewer {
  transition: perspective .8s;
  perspective: 600px;
  width: 100%;
  height: 300px;
  background-color: $grey-color-light;
  position: relative;
  margin : 0 auto;
  overflow: hidden;
}

.bck {
  position: absolute;
  top: 0;
  left: 0;
  height: 100%;
  width: 100%;
  margin: 0 auto;
  &:after {
    transition: opacity .5s;
    content: 'Zoom out';
    opacity: 0;
    cursor: auto;
  }
}
.zoomed .bck {
  &:after {
    opacity: 1;
    cursor: pointer;
  }
}

.accordeon-viewer {
  .bckwd {
    transition: opacity .5s;
    top:0;
    left:0;
    height: 100%;
    width: 10%;
    position: absolute;
    opacity: .4;
    background-image: linear-gradient(to right, rgba(black, .5), transparent);
  }
  .fwd {
    transition: opacity .5s;
    top:0;
    right:0;
    height: 100%;
    width: 10%;
    position: absolute;
    opacity: .4;
    background-image: linear-gradient(to left, rgba(black, .5), transparent);
  }
  &.zoomed {
      .bckwd, .fwd {
          opacity: 0;
      }
  }
}
